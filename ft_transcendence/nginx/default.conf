server {
    listen 80 ssl;
    
    server_name localhost;

    ssl_protocols  TLSv1.2 TLSv1.3;
    ssl_certificate_key /etc/ssl/django.42.fr.key;
    ssl_certificate /etc/ssl/django.42.fr.crt;

    location / {
        alias /nginx/;
        index   /base/base.html;
    }

    location /game {
        alias /nginx/;
        index   /base/base.html;
    }



# proxy_pass http://backend:8000;
# 의미: 들어오는 요청을 http://backend:8000로 전달합니다. 여기서 backend는 백엔드 서버의 호스트명이나 IP 주소를 의미합니다.

# proxy_http_version 1.1;
# 의미: 백엔드 서버와의 통신에 HTTP/1.1을 사용하도록 지정합니다. 이는 HTTP/1.1의 기능(예: 연결 유지)을 사용할 수 있게 합니다.

# proxy_set_header
# 의미: 백엔드 서버로 전달되는 요청에 특정 헤더를 추가하거나 수정합니다. 각 헤더의 역할은 다음과 같습니다:

# Upgrade $http_upgrade;:
# 의미: 클라이언트 요청의 Upgrade 헤더 값을 백엔드 서버로 전달합니다.
# 용도: 주로 WebSocket 같은 프로토콜 업그레이드 요청에 사용됩니다.

# Connection "upgrade";:
# 의미: Connection 헤더를 "upgrade"로 설정합니다. 이는 프로토콜 업그레이드를 처리하기 위해 필요합니다.

# Host $host;:
# 의미: 클라이언트의 요청 호스트명을 백엔드 서버로 전달합니다.
# 용도: 가상 호스팅 설정에서 백엔드 서버가 요청의 호스트명을 인식할 수 있게 합니다.

# X-Real-IP $remote_addr;:
# 의미: 클라이언트의 실제 IP 주소를 백엔드 서버로 전달합니다.
# 용도: 백엔드 서버가 클라이언트의 실제 IP를 로그에 기록하거나 기타 용도로 사용할 수 있게 합니다.

# X-Forwarded-For $proxy_add_x_forwarded_for;:
# 의미: 클라이언트의 원래 IP 주소를 X-Forwarded-For 헤더에 추가하여 백엔드 서버로 전달합니다.
# 용도: 클라이언트의 원래 IP 주소 추적을 위해 사용됩니다. 여러 프록시를 거칠 경우 모든 IP가 이 헤더에 추가됩니다.

# X-Forwarded-Proto $scheme;:
# 의미: 요청의 프로토콜(http 또는 https)을 백엔드 서버로 전달합니다.
# 용도: 백엔드 서버가 요청이 어떤 프로토콜로 왔는지 알 수 있게 합니다. 예를 들어, HTTPS 요청인지 HTTP 요청인지 파악할 때 사용됩니다.

    location ~ ^/admin(/.*)?$ {
    # location /admin {
        proxy_pass http://backend:8000/admin$1;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /user {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /info {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /chat {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ~ ^/match(/.*)?$ {
        proxy_pass http://backend:8000/match$1;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /tournament {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /profile_pictures {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws/chat {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws/privatechat {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws/tournament {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws/message {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }


    location /ws/game {
        proxy_pass http://game:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    add_header X-Frame-Options "DENY";
    add_header X-XSS-Protection "1; mode=block";

}

# $http_upgrade: 클라이언트의 요청 헤더 중 Upgrade 헤더의 값을 나타내는 Nginx 변수입니다. 
# 이 헤더는 클라이언트가 현재 사용 중인 프로토콜을 업그레이드할 때 사용됩니다. 
# 예를 들어, WebSocket 프로토콜을 사용하려면 클라이언트와 서버 간의 연결을 HTTP에서 WebSocket으로 업그레이드해야 합니다.
# map $http_upgrade %connection_upgrade { ... }: Nginx의 map 지시문은 하나의 변수 값을 다른 변수 값으로 매핑할 때 사용됩니다. 
# 이 경우 $http_upgrade의 값에 따라 $connection_upgrade 값을 설정합니다.
# default upgrade;: $http_upgrade의 값이 기본값인 경우, 즉 클라이언트 요청에 Upgrade 헤더가 포함되어 있을 때, $connection_upgrade 변수의 값은 upgrade로 설정됩니다. 
# 이는 Nginx가 HTTP 연결을 업그레이드할 수 있는 프로토콜로 열어둔다는 것을 의미합니다. 
# 를 들어, WebSocket 프로토콜을 사용하는 경우에는 이 설정이 필요합니다.
# '' close;: $http_upgrade의 값이 비어 있는 경우, 즉 클라이언트 요청에 Upgrade 헤더가 포함되지 않았을 때, $connection_upgrade 변수의 값은 close로 설정됩니다. 
# 이는 Nginx가 HTTP 연결을 닫는다는 것을 의미합니다. 클라이언트가 업그레이드를 요청하지 않은 경우에는 HTTP 연결을 닫음으로써 불필요한 연결을 유지하지 않습니다.
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

