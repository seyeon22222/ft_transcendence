server {
    listen 80 ssl;
    
    server_name localhost;

    ssl_protocols  TLSv1.2 TLSv1.3;
    ssl_certificate_key /etc/ssl/django.42.fr.key;
    ssl_certificate /etc/ssl/django.42.fr.crt;

    # location /src {
    #     alias /nginx/ft_front/src
    # }
    
    location / {
        alias /nginx/;
        index   /base/base.html;
    }

    location ~ ^/admin(/.*)?$ {
    # location /admin {
        proxy_pass http://backend:8000/admin$1;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /user {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /chat {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # location ^~/api/(*) (
    #     alias /ft_front/src;
    #     proxy_pass http//backend:8000/$1;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # )
    
    # location ^~/chat/ {
    #     alias /nginx/src/;
    #     try_files $uri $uri/ =404;

    #     proxy_pass http://backend:8000/$1;
    #     proxy_http_version 1.1;
        
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
}

# $http_upgrade: 클라이언트의 요청 헤더 중 Upgrade 헤더의 값을 나타내는 Nginx 변수입니다. 
# 이 헤더는 클라이언트가 현재 사용 중인 프로토콜을 업그레이드할 때 사용됩니다. 
# 예를 들어, WebSocket 프로토콜을 사용하려면 클라이언트와 서버 간의 연결을 HTTP에서 WebSocket으로 업그레이드해야 합니다.
# map $http_upgrade %connection_upgrade { ... }: Nginx의 map 지시문은 하나의 변수 값을 다른 변수 값으로 매핑할 때 사용됩니다. 
# 이 경우 $http_upgrade의 값에 따라 $connection_upgrade 값을 설정합니다.
# default upgrade;: $http_upgrade의 값이 기본값인 경우, 즉 클라이언트 요청에 Upgrade 헤더가 포함되어 있을 때, $connection_upgrade 변수의 값은 upgrade로 설정됩니다. 
# 이는 Nginx가 HTTP 연결을 업그레이드할 수 있는 프로토콜로 열어둔다는 것을 의미합니다. 
# 를 들어, WebSocket 프로토콜을 사용하는 경우에는 이 설정이 필요합니다.
# '' close;: $http_upgrade의 값이 비어 있는 경우, 즉 클라이언트 요청에 Upgrade 헤더가 포함되지 않았을 때, $connection_upgrade 변수의 값은 close로 설정됩니다. 
# 이는 Nginx가 HTTP 연결을 닫는다는 것을 의미합니다. 클라이언트가 업그레이드를 요청하지 않은 경우에는 HTTP 연결을 닫음으로써 불필요한 연결을 유지하지 않습니다.
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

